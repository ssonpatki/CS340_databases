{#
    Citation for the following code:
    Course: CS340 - Introduction to Databases
    File: Frontend implementation for Managing Venues (template file)
    Database: SQL 
    Revised: 16 March 2025
    Sourced from: Oregon State Univerity Ecampus Course CS340 - Exploration - Developing in Flask
    Source URL: 
        Exploration: https://canvas.oregonstate.edu/courses/1987790/pages/exploration-developing-in-flask?module_item_id=25023028 
        Flask Starter App: https://github.com/osu-cs340-ecampus/flask-starter-app 
        People.j2 file from bsg_people: https://github.com/osu-cs340-ecampus/flask-starter-app/blob/master/bsg_people_app/templates/people.j2
    Originality: Source code from people.j2 was used to start this assignment, and learn how to utilize flask. The following code is 
    unique other than the structure of the file. 
#}

<html>
{# Adapted from the venues.html UI design #}
<head>
	<title>Venues</title>
	<link href="{{ url_for('venues_bp.static', filename='main.css') }}" rel="stylesheet" type="text/css">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
</head>
<body>
    <header>
		<h1>
			ABC Event Management System
		</h1>
        <nav>
            <a href="{{ url_for('home_bp.index') }}">Home</a>
            <a href="{{ url_for('events_bp.events_home') }}">Events</a>
            <a href="{{ url_for('venues_bp.venues_home') }}">Venues</a>
            <a href="{{ url_for('attendees_bp.attendees_home') }}">Attendees</a>
            <a href="{{ url_for('event_has_attendees_bp.event_has_attendees_home') }}">Events Attendees</a>
            <a href="{{ url_for('task_definitions_bp.task_definitions_home') }}">Task Definitions</a>
            <a href="{{ url_for('task_assignments_bp.task_assignments_home') }}">Task Assignments</a>
		</nav>
	</header>
    <main> 
	
        <h2 class="mainHeading">
            <big>Manage Venues</big>
        </h2>

        {# add a venue record form always displayed on frontend page #}
        <h2>Add Venue</h2>
        <form id="addVenueForm">
            <label for="venue_name">Venue Name:</label>
            <input type="text" id="venue_name" placeholder="Venue Name" required>
            <label for="capacity">Capacity:</label>
            <input type="number" id="capacity" placeholder="Capacity" min="1"required>
            <label>
                <input type="checkbox" id="is_wheelchair_accessible"> Wheelchair Accessible
            </label>
            <button type="submit">Add Venue</button>
        </form>    

        {# update a venue record form hidden until edit record button pressed #}
        <form id="updateVenueForm" style="display: none;">
            <h2>Update Venue</h2>
            <input type="hidden" id="update_venue_id">
            <label for="update_venue_name">New Venue Name:</label>
            <input type="text" id="update_venue_name" placeholder="New Venue Name" required>
            <label for="update_capacity">New Capacity:</label>
            <input type="number" id="update_capacity" placeholder="New Capacity" min="1" required>
            <label>
                <input type="checkbox" id="update_is_wheelchair_accessible"> Wheelchair Accessible
            </label>
            <button type="submit">Update Venue</button>
            <button type="button" onclick="cancelUpdate()">Cancel</button>
        </form>

        {# create a table on the frontend to display all venue records #}
        <h2><big>Venues List</big></h2>
        <table border="1">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Venue Name</th>
                    <th>Capacity</th>
                    <th>Wheelchair Accessible</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody id="venueList"></tbody>
        </table>

	</main>    
    <script>
    {# scripts interact with route.py file to manipulate backend #}

        {# load used to populate entity table #}
        function loadVenues() {
            $.get('/venues/api/venues', function(data) {
                console.log("üîπ Loaded venues:", data);  // Debugging output

                $('#venueList').empty();
                data.forEach(venue => {
                    $('#venueList').append(`
                        <tr>
                            <td>${venue.venue_id}</td>
                            <td>${venue.venue_name}</td>
                            <td>${venue.capacity}</td>
                            <td>${venue.is_wheelchair_accessible ? 'Yes' : 'No'}</td>
                            <td>
                                <button onclick="editVenue(${venue.venue_id}, '${venue.venue_name}', ${venue.capacity}, ${venue.is_wheelchair_accessible})">Edit</button>
                                <button onclick="deleteVenue(${venue.venue_id})">Delete</button>
                            </td>
                        </tr>
                    `);
                });
            }).fail(function(xhr) {
                console.error("‚ùå Error loading venues:", xhr.responseText);
            });
        }

        {# interacts with add function in route.py #}
        $('#addVenueForm').submit(function(event) {
            event.preventDefault();

            const newVenue = {
                venue_name: $('#venue_name').val().trim(),
                capacity: parseInt($('#capacity').val(), 10) || 0,
                is_wheelchair_accessible: $('#is_wheelchair_accessible').prop('checked') ? 1 : 0
            };

            console.log("üîπ Sending venue data:", newVenue);  // Debugging

            $.ajax({
                url: '/venues/api/venues',
                type: 'POST',
                contentType: "application/json",
                data: JSON.stringify(newVenue),
                success: function() {
                    alert("‚úÖ Venue added successfully!");
                    loadVenues();
                    $('#addVenueForm')[0].reset();
                },
                error: function(xhr) {
                    alert("‚ùå Error adding venue: " + xhr.responseJSON.error);
                }
            });
        });

        function editVenue(id, name, capacity, wheelchair) {
            $('#update_venue_id').val(id);
            $('#update_venue_name').val(name);
            $('#update_capacity').val(capacity);
            $('#update_is_wheelchair_accessible').prop('checked', wheelchair);
            $('#updateVenueForm').show();
        }

        {# interacts with update function in route.py #}
        $('#updateVenueForm').submit(function(event) {
            event.preventDefault();

            const venueId = $('#update_venue_id').val().trim();
            if (!venueId) {
                alert("‚ùå Venue ID is missing.");
                return;
            }

            const updatedVenue = {
                venue_name: $('#update_venue_name').val().trim(),
                capacity: parseInt($('#update_capacity').val(), 10) || 0,
                is_wheelchair_accessible: $('#update_is_wheelchair_accessible').prop('checked') ? 1 : 0
            };

            console.log("üîπ Sending Update Request for Venue ID:", venueId, updatedVenue); // Debugging output

            $.ajax({
                url: `/venues/api/venues/${venueId}`,  // Ensure venue ID is in the URL
                type: 'PUT',
                contentType: "application/json",
                data: JSON.stringify(updatedVenue),
                success: function(response) {
                    alert("‚úÖ Venue updated successfully!");
                    loadVenues();
                    $('#updateVenueForm')[0].reset();
                    $('#updateVenueForm').hide();
                },
                error: function(xhr) {
                    alert("‚ùå Error updating venue: " + xhr.responseJSON.error);
                }
            });
        });

    
        {# interacts with delete function in route.py #}
        function deleteVenue(id) {
            if (confirm("Are you sure you want to delete this venue?")) {
                $.ajax({
                    url: `/venues/api/venues/${id}`,
                    type: 'DELETE',
                    success: function() {
                        loadVenues();
                    }
                });
            }
        }

        {# used to hide edit form if the user selects cancel #}
        function cancelUpdate() {
            $('#updateVenueForm').hide();
        }

        {# populate table immediately when page loads #}
        $(document).ready(function() {
            loadVenues();
        });
    </script>
</body>
</html>
